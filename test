#!/usr/bin/env python3.6
import csv
import logging
import sys
import glob
import os
from datetime import timedelta

if len(sys.argv) < 3:
    print("Provide two dates as parameters.")
    sys.exit(1)

jt_directory = "/opt/t24/bnk/UD/bnk.interface/JT/out"
log_dir = "/opt/t24/support_scripts/cob_analyser/log"

date_mask1 = sys.argv[1]
date_mask2 = sys.argv[2]

file1 = glob.glob(os.path.join(jt_directory, f"JT.{date_mask1}*.CSV"))[0]
file2 = glob.glob(os.path.join(jt_directory, f"JT.{date_mask2}*"))[0]

log_file = os.path.join(log_dir, "jt_compare.log")

logging.basicConfig(filename=log_file, level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s')

def time_to_timedelta(time_str):
    try:
        hours, minutes, seconds = map(int, time_str.split(':'))
        return timedelta(hours=hours, minutes=minutes, seconds=seconds)
    except ValueError:
        return None

def time_to_seconds(time_str):
    if isinstance(time_str, timedelta):
        return time_str.total_seconds()
    else:
        h, m, s = map(int, time_str.split(':'))
        return h * 3600 + m * 60 + s

def combine_times(rows):
    combined = {}
    process_rows = {}
    
    for row in rows:
        if len(row) < 28:
            continue

        key = (row[1], row[2])
        time_value = time_to_timedelta(row[7])

        if time_value is None:
            continue

        if key in process_rows:
            if row[27].strip() == "SingleThread":
                combined[key] += time_value
            else:
                combined[key] = combined[key]
        else:
            process_rows[key] = row
            combined[key] = time_value

    return combined

with open(file1, "r") as f1, open(file2, "r") as f2:
    reader1 = list(csv.reader(f1, delimiter=","))
    reader2 = list(csv.reader(f2, delimiter=","))

    combined_times1 = combine_times(reader1)
    combined_times2 = combine_times(reader2)

    difference_found = False

    for key in combined_times1:
        if len(key) < 2:
            continue

        if key in combined_times2:
            time1 = combined_times1[key]
            time2 = combined_times2[key]

            if time1 is None or time2 is None:
                continue

            if time1 - time2 > timedelta(minutes=5):
                for row in reader2:
                    if row[1] == key[0] and row[2] == key[1]:
                        processed_ids2 = row[9]
                        break

                per_time1 = time_to_seconds(time1)
                per_time2 = time_to_seconds(time2)
                diff = ((per_time1 - per_time2) / per_time2) * 100
                difference_found = True

                message = f"{date_mask1} {key[0]} {key[1]} took longer than 5 minutes from the last COB {time1 - time2} {date_mask1}: {time1} {date_mask2}: {time2} Diff in % is {diff:.2f} Processed IDs {date_mask1}: {processed_ids2}"
                logging.info(message)

    if not difference_found:
        logging.info(f"{date_mask1} No BATCHs/JOBs ran over 5 minutes from last COB.")
