<script>
function parseElapsedToMinutes(timeStr) {
    const parts = timeStr.split(':');
    if (parts.length === 3) {
        const h = parseInt(parts[0], 10);
        const m = parseInt(parts[1], 10);
        const s = parseInt(parts[2], 10);
        return h * 60 + m + s / 60;
    }
    return 0;
}

function formatHHMMSS(minutes) {
    const totalSec = Math.round(minutes * 60);
    const h = Math.floor(totalSec / 3600);
    const m = Math.floor((totalSec % 3600) / 60);
    const s = totalSec % 60;
    if (h > 0) return `${h}:${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`;
    return `${m}:${s.toString().padStart(2, '0')}`;
}

function getCOBElapsedData() {
    const table = document.getElementById("recordsTable");
    const rows = table.getElementsByTagName("tr");

    const dates = [];
    const elapsed = [];

    for (let i = 1; i < rows.length; i++) {
        const cells = rows[i].getElementsByTagName("td");
        if (cells.length >= 5) {
            const date = cells[0].innerText;
            const time = cells[3].innerText;
            const elapsedMin = parseElapsedToMinutes(time);

            dates.push(date);
            elapsed.push(elapsedMin);
        }
    }

    const average = elapsed.reduce((a, b) => a + b, 0) / elapsed.length;
    return { dates, elapsed, average };
}

function renderCOBElapsedChart() {
    const ctx = document.getElementById("cobElapsedChart").getContext("2d");
    const { dates, elapsed, average } = getCOBElapsedData();

    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: dates,
            datasets: [
                {
                    label: 'COB Elapsed',
                    data: elapsed,
                    backgroundColor: 'orange'
                },
                {
                    label: 'Average Elapsed',
                    data: Array(dates.length).fill(average),
                    type: 'line',
                    borderColor: 'red',
                    borderDash: [5, 5],
                    pointRadius: 0,
                    borderWidth: 2,
                    order: 999
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function (context) {
                            return `${context.dataset.label}: ${formatHHMMSS(context.raw)}`;
                        }
                    }
                },
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: `K&H TPH Production Close of Business / Average duration - ${formatHHMMSS(average)}`,
                    font: {
                        size: 18,
                        weight: 'bold'
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    max: 100, // you can dynamically set this
                    ticks: {
                        callback: function (value) {
                            return formatHHMMSS(value);
                        }
                    },
                    title: {
                        display: true,
                        text: 'Elapsed Time (HH:mm:ss)'
                    }
                }
            }
        },
        plugins: [{
            id: 'barLabels',
            afterDatasetsDraw(chart) {
                const { ctx, data, scales: { y } } = chart;
                ctx.save();
                ctx.font = 'bold 11px sans-serif';
                ctx.fillStyle = 'black';
                ctx.textAlign = 'center';

                chart.data.datasets[0].data.forEach((value, index) => {
                    const x = chart.getDatasetMeta(0).data[index].x;
                    const yPos = y.getPixelForValue(value);
                    ctx.fillText(formatHHMMSS(value), x, yPos - 6);
                });

                ctx.restore();
            }
        }]
    });
}

window.onload = function () {
    renderCOBElapsedChart();
};
</script>
