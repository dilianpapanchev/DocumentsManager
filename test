<!DOCTYPE html>
<html lang="bg">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>COB Analyser Report</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: "Century Gothic", sans-serif;
            background-color: #f4f4f9;
            text-align: center;
            margin: 20px;
        }
        table {
            border-collapse: collapse;
            width: 80%;
            margin: 20px auto;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        th, td {
            padding: 10px;
            text-align: center;
            border: 1px solid #3b8eff;
        }
        th {
            background-color: #3b8eff;
            color: black;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        tr:nth-child(odd) {
            background-color: #ffffff;
        }
        .chart-container {
            width: 100%;
            max-width: 1000px;
            height: 400px;
            margin: auto;
            background: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        canvas {
            width: 100% !important;
            height: 100% !important;
        }
    </style>
</head>
<body>

    <h2>COB Analyser Report</h2>

    <!-- Ð¢Ð°Ð±Ð»Ð¸Ñ†Ð° Ð·Ð° CPU Usage -->
    <table class="rounded" id="cpuTable">
        <tr><th colspan="4">âš¡ CPU Usage during COB</th></tr>
        <tr>
            <th>TIMEFRAME (CET)</th>
            <th>USER%</th>
            <th>SYSTEM%</th>
            <th>IDLE%</th>
        </tr>
        <tr><td>20:30</td><td>8.03</td><td>1.62</td><td>90.19</td></tr>
        <tr><td>20:40</td><td>34.07</td><td>3.54</td><td>62.24</td></tr>
        <tr><td>20:50</td><td>73.51</td><td>4.46</td><td>21.92</td></tr>
        <tr>
            <td colspan="4">
                <div class="chart-container">
                    <canvas id="cpuChart"></canvas>
                </div>
            </td>
        </tr>
    </table>

    <!-- Ð¢Ð°Ð±Ð»Ð¸Ñ†Ð° Ð·Ð° Records Per Minute -->
    <table class="rounded" id="recordsTable">
        <tr><th colspan="3">ðŸ“Š COB last 3 Elapsed Time & Transactions</th></tr>
        <tr>
            <th>Date</th>
            <th>Elapsed Time (hh:mm:ss)</th>
            <th>Transactions</th>
        </tr>
        <tr><td>20250317</td><td>05:18:01</td><td>15720935</td></tr>
        <tr><td>20250318</td><td>03:42:15</td><td>14323460</td></tr>
        <tr>
            <td colspan="3">
                <div class="chart-container">
                    <canvas id="recordsChart"></canvas>
                </div>
            </td>
        </tr>
    </table>

    <script>
        function parseTimeToMinutes(timeString) {
            const parts = timeString.split(":");
            if (parts.length === 3) {
                const hours = parseInt(parts[0], 10);
                const minutes = parseInt(parts[1], 10);
                const seconds = parseInt(parts[2], 10);
                return hours * 60 + minutes + seconds / 60;
            }
            return 0;
        }

        function getRecordsData() {
            const table = document.getElementById("recordsTable");
            const rows = table.getElementsByTagName("tr");
            
            let labels = [];
            let recordsPerMinute = [];

            for (let i = 2; i < rows.length - 1; i++) {
                const cells = rows[i].getElementsByTagName("td");
                if (cells.length === 3) {
                    const date = cells[0].innerText;
                    const elapsedTime = parseTimeToMinutes(cells[1].innerText);
                    const transactions = parseInt(cells[2].innerText, 10);
                    
                    if (elapsedTime > 0) {
                        labels.push(date);
                        recordsPerMinute.push(transactions / elapsedTime);
                    }
                }
            }

            return { labels, recordsPerMinute };
        }

        function getCPUData() {
            const table = document.getElementById("cpuTable");
            const rows = table.getElementsByTagName("tr");
            
            let labels = [];
            let userUsage = [];
            let systemUsage = [];
            let idleUsage = [];

            for (let i = 2; i < rows.length - 1; i++) {
                const cells = rows[i].getElementsByTagName("td");
                if (cells.length === 4) {
                    labels.push(cells[0].innerText);
                    userUsage.push(parseFloat(cells[1].innerText));
                    systemUsage.push(parseFloat(cells[2].innerText));
                    idleUsage.push(parseFloat(cells[3].innerText));
                }
            }

            return { labels, userUsage, systemUsage, idleUsage };
        }

        function renderCPUChart() {
            const { labels, userUsage, systemUsage, idleUsage } = getCPUData();
            const ctx = document.getElementById('cpuChart').getContext('2d');

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        { label: 'USER%', data: userUsage, borderColor: 'red', borderWidth: 2 },
                        { label: 'SYSTEM%', data: systemUsage, borderColor: 'blue', borderWidth: 2 },
                        { label: 'IDLE%', data: idleUsage, borderColor: 'green', borderWidth: 2 }
                    ]
                }
            });
        }

        function renderRecordsChart() {
            const { labels, recordsPerMinute } = getRecordsData();
            const ctx = document.getElementById('recordsChart').getContext('2d');

            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        { label: 'Records Per Minute', data: recordsPerMinute, backgroundColor: 'purple' }
                    ]
                }
            });
        }

        window.addEventListener("load", function() {
            renderCPUChart();
            renderRecordsChart();
        });
    </script>

</body>
</html>
