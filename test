<script>
function parseElapsedToHours(timeStr) {
    const parts = timeStr.split(':');
    if (parts.length === 3) {
        const h = parseInt(parts[0], 10);
        const m = parseInt(parts[1], 10);
        const s = parseInt(parts[2], 10);
        return h + m / 60 + s / 3600;
    }
    return 0;
}

function getElapsedChartData() {
    const table = document.getElementById("recordsTable");
    const rows = table.getElementsByTagName("tr");

    const dates = [];
    const cobElapsed = [], rrElapsed = [];

    for (let i = 1; i < rows.length; i++) {
        const cells = rows[i].getElementsByTagName("td");
        if (cells.length === 8) {
            const date = cells[0].innerText;
            const cob = parseElapsedToHours(cells[3].innerText);
            const rr = parseElapsedToHours(cells[7].innerText);

            dates.push(date);
            cobElapsed.push(cob);
            rrElapsed.push(rr);
        }
    }

    return { dates, cobElapsed, rrElapsed };
}

function formatHHMM(hoursFloat) {
    const h = Math.floor(hoursFloat);
    const m = Math.round((hoursFloat - h) * 60);
    return `${h}:${m.toString().padStart(2, '0')}`;
}

function renderElapsedChart() {
    const ctx = document.getElementById("elapsedChart").getContext("2d");
    const { dates, cobElapsed, rrElapsed } = getElapsedChartData();

    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: dates,
            datasets: [
                {
                    label: 'COB Elapsed',
                    data: cobElapsed,
                    backgroundColor: 'orange',
                    stack: 'stack1'
                },
                {
                    label: 'RR Elapsed',
                    data: rrElapsed,
                    backgroundColor: 'gray',
                    stack: 'stack1'
                },
                {
                    label: 'Duration Limit (2:30)',
                    data: Array(dates.length).fill(2.5),
                    type: 'line',
                    borderColor: 'red',
                    borderDash: [6, 4],
                    pointRadius: 0,
                    borderWidth: 2,
                    order: 999
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    max: 7,
                    ticks: {
                        callback: function(value) {
                            return formatHHMM(value);
                        }
                    },
                    title: {
                        display: true,
                        text: 'Duration (HH:mm)'
                    },
                    stacked: true
                },
                x: {
                    stacked: true
                }
            },
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return `${context.dataset.label}: ${formatHHMM(context.raw)}`;
                        }
                    }
                },
                title: {
                    display: true,
                    text: 'COB & RR Elapsed Times vs Duration Limit',
                    font: {
                        size: 18,
                        weight: 'bold'
                    }
                },
                legend: {
                    display: true
                }
            }
        },
        plugins: [{
            id: 'customLabels',
            afterDatasetsDraw(chart) {
                const { ctx, chartArea, data, scales } = chart;
                const cobMeta = chart.getDatasetMeta(0);
                const rrMeta = chart.getDatasetMeta(1);
                const y = scales.y;

                ctx.save();
                ctx.font = 'bold 11px sans-serif';
                ctx.textAlign = 'center';
                ctx.fillStyle = 'black';

                data.labels.forEach((label, i) => {
                    const cob = data.datasets[0].data[i];
                    const rr = data.datasets[1].data[i];
                    const total = cob + rr;

                    const x = cobMeta.data[i].x;
                    const cobTop = y.getPixelForValue(cob);
                    const rrTop = y.getPixelForValue(total);

                    // COB label (вътре)
                    if (cob > 0) {
                        const cobCenterY = (y.getPixelForValue(0) + cobTop) / 2;
                        ctx.fillText(formatHHMM(cob), x, cobCenterY);
                    }

                    // RR label (вътре)
                    if (rr > 0) {
                        const rrCenterY = (cobTop + rrTop) / 2;
                        ctx.fillText(formatHHMM(rr), x, rrCenterY);
                    }

                    // Total label (над бара)
                    if (total > 0) {
                        ctx.fillText(formatHHMM(total), x, rrTop - 6);
                    }
                });

                ctx.restore();
            }
        }]
    });
}

window.onload = function () {
    renderElapsedChart();
};
</script>
