/**
 * Скрива всички table-rows извън последните N, където
 * N = max(days, 3)
 */
function updateTableRows(days) {
  const rows = Array.from(
    document.getElementById('recordsTable')
            .getElementsByTagName('tr')
  ).slice(1);  // пропускаме header-а
  const n = rows.length;

  // Колко да покажем (най-малко 3)
  const visibleCount = Math.max(days, 3);
  // Индексът, от който започваме да показваме
  const start = Math.max(0, n - visibleCount);

  rows.forEach((tr, i) => {
    tr.hidden = i < start;
  });
}

plugins: [{
  id: 'labelsInside',
  afterDatasetsDraw(chart) {
    const { ctx, data, scales } = chart;
    const cobMeta = chart.getDatasetMeta(0);
    // RR колоните са върху COB, но взимаме техния мета вече за изчисления
    const yScale  = scales.y;

    ctx.save();
    ctx.font = 'bold 11px sans-serif';
    ctx.textAlign = 'center';
    ctx.fillStyle = getTextColor();

    data.labels.forEach((_, i) => {
      const cob   = data.datasets[0].data[i];
      const rr    = data.datasets[1].data[i];
      const total = cob + rr;
      const x     = cobMeta.data[i].x;

      // COB етикет вътре в синята част
      if (cob > 0) {
        const cobTop    = yScale.getPixelForValue(cob);
        const cobBottom = yScale.getPixelForValue(0);
        const yCob      = (cobTop + cobBottom) / 2;
        ctx.fillText(formatHHMM(cob), x, yCob);
      }

      // RR етикет вътре в сивата част
      if (rr > 0) {
        const rrTop     = yScale.getPixelForValue(total);
        const rrBottom  = yScale.getPixelForValue(cob);
        const yRr       = (rrTop + rrBottom) / 2;
        ctx.fillText(formatHHMM(rr), x, yRr);
      }

      // Total над колоната
      if (total > 0) {
        const yTotal = yScale.getPixelForValue(total) - 6;
        ctx.fillText(formatHHMM(total), x, yTotal);
      }
    });

    ctx.restore();
  }
}]





/**
 * Скрива table-rows извън текущия range:
 * - при days ≤ 10: остава видим само последните 10
 * - при days > 10: остава видим само последните days
 */
function updateTableRows(days) {
  const rows = Array.from(
    document.getElementById('recordsTable')
            .getElementsByTagName('tr')
  ).slice(1);  // пропускаме header-а
  const n = rows.length;

  // Ако нямаме поне 1 ред, нищо не правим
  if (n === 0) return;

  // Започваме от този индекс
  const start = days <= 10
    ? Math.max(0, n - 10)    // винаги последните 10, ако могат
    : Math.max(0, n - days); // или последните days

  rows.forEach((tr, i) => {
    tr.hidden = i < start;
  });
}



/**
 * Скрива (hidden) всички table-rows извън текущия range,
 * но само когато days > 10. Последните 10 винаги остават видими.
 */
function updateTableRows(days) {
  // всички редове, без header-а
  const rows = Array.from(
    document.getElementById('recordsTable')
            .getElementsByTagName('tr')
  ).slice(1);
  const n = rows.length;

  if (days > 10) {
    // index от k до n-1 ще са видими, където k = n - days
    const k = n - days;
    rows.forEach((tr, i) => {
      // ако i < k – скрий, иначе – покажи
      tr.hidden = i < k;
    });
  } else {
    // days ≤ 10: не пипаме таблицата – махаме hidden на всички
    rows.forEach(tr => tr.hidden = false);
  }
}


function onDaysChange() {
  const days = parseInt(slider.value, 10);
  label.textContent = days;

  updateContainerWidth(days);
  updateTableRows(days);    // <— добавяш го тук
  renderElapsedChart();     // вече той рисува графиката
}
