<script>
  // === helper функции ===
  function getTextColor() {
    return document.body.classList.contains('dark-mode') ? 'white' : 'black';
  }

  function parseElapsedToHours(timeStr) {
    const parts = timeStr.split(':');
    if (parts.length === 3) {
      const h = parseInt(parts[0], 10);
      const m = parseInt(parts[1], 10);
      const s = parseInt(parts[2], 10);
      return h + m/60 + s/3600;
    }
    return 0;
  }

  function formatHHMM(hoursFloat) {
    const h = Math.floor(hoursFloat);
    const m = Math.round((hoursFloat - h) * 60);
    return `${h}:${m.toString().padStart(2, '0')}`;
  }

  // === взимане на данни от таблицата ===
  function getElapsedChartData() {
    const table     = document.getElementById("recordsTable");
    const rows      = Array.from(table.getElementsByTagName("tr")).slice(1);
    const maxDays   = parseInt(document.getElementById("daysRange").value, 10) || 10;
    const dates     = [];
    const cobElapsed = [];
    const rrElapsed = [];

    for (let i = rows.length - 1; i >= 0 && dates.length < maxDays; i--) {
      const cells = rows[i].getElementsByTagName("td");
      if (cells.length >= 9) {
        const date   = cells[0].innerText.trim();
        const cobVal = cells[4].innerText.trim();
        const rrVal  = cells[8].innerText.trim();
        if (date && cobVal && rrVal) {
          dates.push(date);
          cobElapsed.push(parseElapsedToHours(cobVal));
          rrElapsed.push(parseElapsedToHours(rrVal));
        }
      }
    }

    dates.reverse();
    cobElapsed.reverse();
    rrElapsed.reverse();
    return { dates, cobElapsed, rrElapsed };
  }

  // === функция за динамична широчина на контейнера ===
  function updateContainerWidth(days) {
    const ctr = document.getElementById("chartContainer");
    ctr.classList.remove("w-0-10", "w-11-20", "w-21-plus");
    if (days <= 10) {
      ctr.classList.add("w-0-10");
    } else if (days <= 20) {
      ctr.classList.add("w-11-20");
    } else {
      ctr.classList.add("w-21-plus");
    }
  }

  // === render функцията – ползваш я подолу ===
  let elapsedChartInstance;
  function renderElapsedChart() {
    const { dates, cobElapsed, rrElapsed } = getElapsedChartData();

    if (elapsedChartInstance) {
      elapsedChartInstance.destroy();
    }

    const ctx = document.getElementById("elapsedChart").getContext("2d");
    elapsedChartInstance = new Chart(ctx, {
      type: "bar",
      data: {
        labels: dates,
        datasets: [
          {
            label: "COB Elapsed",
            data: cobElapsed,
            backgroundColor: "rgba(154,200,245,1)",
            stack: "stack1",
            order: 1
          },
          {
            label: "RR Elapsed",
            data: rrElapsed,
            backgroundColor: "rgba(181,181,181,1)",
            stack: "stack1",
            order: 2
          },
          {
            label: "Duration Limit (2:30)",
            data: Array(dates.length).fill(2.5),
            type: "line",
            borderColor: "red",
            borderDash: [6,4],
            pointRadius: 0,
            borderWidth: 2,
            order: 0
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        layout: {
          padding: { top:20, bottom:20, left:10, right:10 }
        },
        scales: {
          x: {
            stacked: true,
            ticks: {
              autoSkip: false,
              maxRotation: 45,
              minRotation: 45
            }
          },
          y: {
            beginAtZero: true,
            max: 7,
            ticks: {
              maxTicksLimit: 8,
              callback: v => formatHHMM(v)
            }
          }
        },
        plugins: {
          tooltip: {
            callbacks: {
              label: ctx => `${ctx.dataset.label}: ${formatHHMM(ctx.raw)}`
            }
          },
          title: {
            display: true,
            text: "COB & RR Elapsed Times vs Duration Limit",
            color: getTextColor(),
            font: { size:13, weight:"bold" }
          },
          legend: {
            labels: { font: { size:13 } }
          }
        }
      },
      plugins: [{
        id: "totalLabel",
        afterDatasetsDraw(chart) {
          const { ctx, data, scales } = chart;
          const metaCob = chart.getDatasetMeta(0);
          const yScale  = scales.y;
          ctx.save();
          ctx.font = "bold 11px sans-serif";
          ctx.textAlign = "center";
          ctx.fillStyle = getTextColor();

          data.labels.forEach((_, i) => {
            const total = data.datasets[0].data[i] + data.datasets[1].data[i];
            if (total <= 0) return;
            const x = metaCob.data[i].x;
            const y = yScale.getPixelForValue(total) - 6;
            ctx.fillText(formatHHMM(total), x, y);
          });

          ctx.restore();
        }
      }]
    });
  }

  // === hook към slider-а и initial setup ===
  document.addEventListener("DOMContentLoaded", () => {
    const slider = document.getElementById("daysRange");
    const label  = document.getElementById("daysValue");

    function onDaysChange() {
      const days = parseInt(slider.value, 10);
      label.textContent = days;
      updateContainerWidth(days);
      renderElapsedChart();    // твоята генерираща функция
    }

    slider.addEventListener("input", onDaysChange);
    onDaysChange();
  });
</script>
