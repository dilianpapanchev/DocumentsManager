let elapsedChartInstance;

function renderElapsedChart() {
  // 1) Взимаме данните както досега
  const { dates, cobElapsed, rrElapsed } = getElapsedChartData();

  // 2) Динамична височина: 20px на ден, min 200, max 800
  const perDayHeight = 20;
  const minH = 200, maxH = 800;
  const neededH = Math.min(
    maxH,
    Math.max(minH, dates.length * perDayHeight + 100)
  );
  document.querySelector('.chart-container').style.height = neededH + 'px';

  // 3) Убиваме стария чарт
  if (elapsedChartInstance) {
    elapsedChartInstance.destroy();
  }

  // 4) Рендерваме новия
  const ctx = document.getElementById("elapsedChart").getContext("2d");
  elapsedChartInstance = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: dates,
      datasets: [
        {
          label: 'COB Elapsed',
          data: cobElapsed,
          backgroundColor: 'rgba(154,200,245,1)',
          stack: 's1', order: 1
        },
        {
          label: 'RR Elapsed',
          data: rrElapsed,
          backgroundColor: 'rgba(181,181,181,1)',
          stack: 's1', order: 2
        },
        {
          label: 'Limit (2:30)',
          data: Array(dates.length).fill(2.5),
          type: 'line',
          borderColor: 'red',
          borderDash: [6,4],
          pointRadius: 0,
          borderWidth: 2,
          order: 0
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      layout: { padding: { top:20, bottom:20, left:10, right:10 } },
      scales: {
        x: {
          stacked: true,
          ticks: {
            autoSkip: false,
            // показваме само ~10 етикета, разпределени равномерно
            callback: (val, idx) => {
              const step = Math.ceil(dates.length / 10);
              return (idx % step === 0) ? dates[idx] : '';
            },
            maxRotation: 45,
            minRotation: 45
          }
        },
        y: {
          beginAtZero: true,
          max: 7,
          ticks: {
            maxTicksLimit: 8,
            callback: v => formatHHMM(v)
          }
        }
      },
      plugins: {
        tooltip: {
          callbacks: {
            label: ctx => `${ctx.dataset.label}: ${formatHHMM(ctx.raw)}`
          }
        },
        title: {
          display: true,
          text: 'COB & RR Elapsed Times vs Duration Limit',
          color: getTextColor(),
          font: { size:13, weight:'bold' }
        },
        legend: {
          labels: { font: { size:13 } }
        }
      }
    },
    plugins: [{
      // само общото време над всяка колона
      id: 'totalLabel',
      afterDatasetsDraw(chart) {
        const { ctx, data, scales } = chart;
        const metaCob = chart.getDatasetMeta(0);
        const yScale  = scales.y;
        ctx.save();
        ctx.font = 'bold 11px sans-serif';
        ctx.textAlign = 'center';
        ctx.fillStyle = getTextColor();

        data.labels.forEach((_, i) => {
          const total = data.datasets[0].data[i] + data.datasets[1].data[i];
          if (total <= 0) return;
          const x = metaCob.data[i].x;
          const y = yScale.getPixelForValue(total) - 6;
          ctx.fillText(formatHHMM(total), x, y);
        });

        ctx.restore();
      }
    }]
  });
}
